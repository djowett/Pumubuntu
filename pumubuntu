#!/usr/bin/env python

print("Import Python modules. If one is missing get it with \"sudo apt-get install python-...\".");

import gobject
import gtk
import appindicator
import pynotify
import json
import time
import threading
import platform
import os
import sys
import argparse
import keybinder
import pynotify



#resources_dir = os.getcwd()
resources_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
script_name = os.path.basename(sys.argv[0])

PREFERENCES_FILENAME = os.path.join(resources_dir, "prefs.json")
class Status():
    def __init__(self, notification_icon):
        self.current_status = Status.STOP
        self.pomodoro_stage = 0
        self.indicator = notification_icon
        self.notifications = Notifications()
        
    def next(self):
        if (self.pomodoro_stage >= 4):
            self.current_status = Status.PAUSE
            self.pomodoro_stage = 0
        elif (self.current_status == Status.STOP or self.current_status == Status.PAUSE or self.current_status == Status.BREAK):
            self.current_status = Status.RUN
            self.pomodoro_stage += 1
        elif (self.current_status == Status.RUN):
            self.current_status = Status.BREAK
        self.notify()
        return self.current_status

    def stop(self):
        self.current_status = Status.STOP
        self.pomodoro_stage = 0 #we reset and start again. If a Pomodoro Begins, It Has to Ring
        self.notify()

    def isRunning(self):
        return self.current_status

    def getStage(self):
        return self.pomodoro_stage

    def notify(self):
        soundfile=resources_dir + "/audio/"
        iconfile=resources_dir + "/images/"
        if (self.current_status == self.STOP):
            soundfile += "stop.wav"
            iconfile += "flag-blue.png"
            self.notifications.stop()
        elif (self.current_status == self.RUN):
            soundfile += "run.wav"
            iconfile += "flag-red.png"
            self.notifications.run()
        elif (self.current_status == self.BREAK):
            soundfile += "break.wav"
            iconfile += "flag-yellow.png"
            self.notifications.rest()
        elif (self.current_status == self.PAUSE):
            soundfile += "pause.wav"
            iconfile += "flag-green.png"
            self.notifications.pause()

        self.indicator.set_icon(iconfile)
        self.indicator.set_attention_icon(iconfile)

        if platform.system() == "Windows":
            from winsound import PlaySound, SND_FILENAME, SND_ASYNC
            PlaySound(soundfile, SND_FILENAME|SND_ASYNC)
        elif (platform.system() == "Linux"):
            from wave import open as waveOpen
            from ossaudiodev import open as ossOpen
            s = waveOpen(soundfile,'rb')
            (nc,sw,fr,nf,comptype, compname) = s.getparams( )
            dsp = ossOpen('/dev/dsp','w')
            try:
                from ossaudiodev import AFMT_S16_NE
            except ImportError:
                if byteorder == "little":
                    AFMT_S16_NE = ossaudiodev.AFMT_S16_LE
                else:
                    AFMT_S16_NE = ossaudiodev.AFMT_S16_BE
            dsp.setparameters(AFMT_S16_NE, nc, fr)
            data = s.readframes(nf)
            s.close()
            dsp.write(data)
            dsp.close()

    def getMinutes(self): #returns current status minutes
        prefs = Preferences()
        if (self.current_status == self.STOP):
            return 0 #minutes
        elif (self.current_status == self.RUN):
            return prefs.get_work_time()
        elif (self.current_status == self.BREAK):
            return prefs.get_short_break_time()
        elif (self.current_status == self.PAUSE):
            return prefs.get_long_break_time()

    STOP = 0
    RUN = 1
    BREAK = 2
    PAUSE = 3

class Timer():
    def __init__(self, status, text_label):
        self.thread = self.CountingThread(text_label, status)
        self.thread.daemon=True
        self.thread.event = threading.Event()
        self.thread.event.clear()
        self.thread.start()


    def isRunning(self):
        return self.thread.status.isRunning()

    def stop(self):
        self.thread.event.clear() # pause thread
        self.thread.stop() # reset pomodoro

    def start(self):
        self.thread.nextStage() # start new pomodoro (we were reset by the stop method. remember?)
        self.thread.event.set()  #run thread

    class CountingThread(threading.Thread):
        def __init__(self, text_label,status):
            threading.Thread.__init__(self)
            self.text_label = text_label
            self.status = status
            self.minutes = 0 #wait until someone tells us to start
            self.seconds = 0

        def stop(self):
            self.status.stop()

        def nextStage(self):
            self.status.next() # next status and Play a sound! :D

        def run(self):
            while (True): #this thread is not restarted
                self.event.wait() # wait until we are allowed to run
                if (self.status.isRunning()):
                    # maybe we were stopped, so we have to update our timer!
                    self.update_timer()
                    while(not(self.minutes==0 and self.seconds==0) and self.status.isRunning()):
                        time.sleep(1)
                        self.text_label.set_text("%(minute)02d:%(second)02d" % \
                                        {"minute": self.minutes,"second": self.seconds})
                        if(self.seconds == 0):
                            self.seconds = 60
                            self.minutes -= 1
                        self.seconds -= 1
                    # switch status
                    self.switch_status();

        def update_timer(self):
            self.minutes = self.status.getMinutes()
            self.seconds = 0
        def switch_status(self):
            if (self.status.isRunning()):
                            self.nextStage()
            #    print("CountingThread: finished..." + str(self.status.isRunning()))
            #else:
            #    print("CountingThread: Pomodoro manually stopped. Status: " + str(self.status.isRunning()))

class Preferences():
    def __init__(self):
        self.KEY_WORK_TIME = "WT"
        self.KEY_LONG_BREAK_TIME = "LT"
        self.KEY_SHORT_BREAK_TIME = "ST"
        self.KEY_START_STOP_KEYBIND = "SSK"
        self.KEY_SHOW_TIME_KEYBIND = "STK"
        self.DEFAULT_WORK_TIME = 25
        self.DEFAULT_LONG_BREAK_TIME = 15
        self.DEFAULT_SHORT_BREAK_TIME = 5
        self.DEFAULT_START_STOP_KEYBIND = "<Ctrl><Alt>P"
        self.DEFAULT_SHOW_TIME_KEYBIND = "<Ctrl><Alt>space"
        self.SAVED_WORK_TIME = 0
        self.SAVED_LONG_BREAK_TIME =0
        self.SAVED_SHORT_BREAK_TIME =0
        self.SAVED_START_STOP_KEYBIND =""
        self.SAVED_SHOW_TIME_KEYBIND =""
        self.read_work_time()

    def save_preferences(self, work_time, short_break_time, long_break_time, start_stop_keybind, show_time_keybind):
        keybinds.instance.unbind()

        obj = {self.KEY_WORK_TIME: work_time, self.KEY_SHORT_BREAK_TIME: short_break_time, self.KEY_LONG_BREAK_TIME: long_break_time, self.KEY_START_STOP_KEYBIND: start_stop_keybind, self.KEY_SHOW_TIME_KEYBIND: show_time_keybind }
        dump = json.dumps(obj)
        file = open(PREFERENCES_FILENAME, "w")
        file.write(dump)
        file.close()

        self.read_work_time()
        keybinds.preferences = self
        keybinds.instance.bind()

    def read_work_time(self):
        try:
            file = open(PREFERENCES_FILENAME, "r")
            dump = json.loads(file.read())
            file.close()
            self.SAVED_WORK_TIME = dump[self.KEY_WORK_TIME]
            self.SAVED_LONG_BREAK_TIME = dump[self.KEY_LONG_BREAK_TIME]
            self.SAVED_SHORT_BREAK_TIME = dump[self.KEY_SHORT_BREAK_TIME]
            self.SAVED_START_STOP_KEYBIND = dump[self.KEY_START_STOP_KEYBIND]
            self.SAVED_SHOW_TIME_KEYBIND = dump[self.KEY_SHOW_TIME_KEYBIND]
        except IOError:
            self.SAVED_WORK_TIME = self.DEFAULT_WORK_TIME
            self.SAVED_LONG_BREAK_TIME = self.DEFAULT_LONG_BREAK_TIME
            self.SAVED_SHORT_BREAK_TIME = self.DEFAULT_SHORT_BREAK_TIME
            self.SAVED_START_STOP_KEYBIND = self.DEFAULT_START_STOP_KEYBIND
            self.SAVED_SHOW_TIME_KEYBIND = self.DEFAULT_SHOW_TIME_KEYBIND

    def get_work_time(self):
            return self.SAVED_WORK_TIME

    def get_long_break_time(self):

            return self.SAVED_LONG_BREAK_TIME

    def get_short_break_time(self):
            return self.SAVED_SHORT_BREAK_TIME

    def get_start_stop_keybind(self):
            return self.SAVED_START_STOP_KEYBIND

    def get_show_time_keybind(self):
            return self.SAVED_SHOW_TIME_KEYBIND

class OptionsWindow(gtk.Window):
    def __init__(self):
        gtk.Window.__init__(self)
        self.set_title("Pumubuntu") # TODO: Set an icon for this window...
        self.prefs = Preferences()

        self.main_box = gtk.Table(6, 2)
        self.main_box.set_row_spacings(10)
        self.main_box.set_col_spacings(10)
        

        self.label1 = gtk.Label("Work time (in minutes):")
        self.label1.set_alignment(0, 0.5)
        self.entry1 = gtk.Entry()
        self.entry1.set_text(str(self.prefs.get_work_time()))
        self.main_box.attach(self.label1, 0, 1, 0, 1)
        self.main_box.attach(self.entry1, 1, 2, 0, 1)
        
        self.label2 = gtk.Label("Short break time (in minutes):")
        self.label2.set_alignment(0, 0.5)
        self.entry2 = gtk.Entry()
        self.entry2.set_text(str(self.prefs.get_short_break_time()))
        self.main_box.attach(self.label2, 0, 1, 1, 2)
        self.main_box.attach(self.entry2, 1, 2, 1, 2)

        self.label3 = gtk.Label("Long break time (in minutes):")
        self.label3.set_alignment(0, 0.5)
        self.entry3 = gtk.Entry()
        self.entry3.set_text(str(self.prefs.get_long_break_time()))
        self.main_box.attach(self.label3, 0, 1, 2, 3)
        self.main_box.attach(self.entry3, 1, 2, 2, 3)

        self.label4 = gtk.Label("Start/Stop hotkey:")
        self.label4.set_alignment(0, 0.5)
        self.entry4 = gtk.Entry()
        self.entry4.set_text(str(self.prefs.get_start_stop_keybind()))
        self.main_box.attach(self.label4, 0, 1, 3, 4)
        self.main_box.attach(self.entry4, 1, 2, 3, 4)

        self.label5 = gtk.Label("Show time hotkey:")
        self.label5.set_alignment(0, 0.5)
        self.entry5 = gtk.Entry()
        self.entry5.set_text(str(self.prefs.get_show_time_keybind()))
        self.main_box.attach(self.label5, 0, 1, 4, 5)
        self.main_box.attach(self.entry5, 1, 2, 4, 5)

        self.button1 = gtk.Button(stock=gtk.STOCK_SAVE)
        self.button1.connect("clicked", self.options_event, "save")
        self.button2 = gtk.Button(stock=gtk.STOCK_QUIT)
        self.button2.connect("clicked", self.options_event, "quit")
        self.main_box.attach(self.button1, 0, 1, 5, 6)
        self.main_box.attach(self.button2, 1, 2, 5, 6)

        # TODO: Add a restore values buttom...

        self.add(self.main_box)
        self.set_border_width(10)

    def options_event(self, button, event):
        if(event == "save"):
            if(self.entry1.get_text() != "" and self.entry2.get_text() != "" and self.entry3.get_text() != ""and self.entry4.get_text() != ""):
                try:
                    values = map(int, [ self.entry1.get_text(), self.entry2.get_text(), self.entry3.get_text()])
                    values.append(self.entry4.get_text())
                    values.append(self.entry5.get_text())
                    self.prefs.save_preferences(values[0], values[1], values[2], values[3], values[4])
                    self.destroy()
                except ValueError:
                    dialog = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, gtk.BUTTONS_NONE, "Please, just use entire numbers.")
                    dialog.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)
                    dialog.run()
                    dialog.destroy()
        if(event == "quit"):
            self.destroy()

class Notifications(object):
    def __init__(self):
        pynotify.init("pumubuntu")
        self._run = pynotify.Notification("Here we go!","Time to get to work!")
        self._run.set_timeout(1)
        self._stop = pynotify.Notification("Interrupted!","The pomodoro has been stopped!")
        self._stop.set_timeout(1)
        self._rest = pynotify.Notification("Break!","Good job! You earned a break!")
        self._rest.set_timeout(1)
        self._pause = pynotify.Notification("Long break!","Good job! You earned a long break!")
        self._pause.set_timeout(1)
        self._show = pynotify.Notification("")
        self._show.set_timeout(1)

    def run(self):
        self._run.show()

    def stop(self):
        self._stop.show()

    def rest(self):
        self._rest.show()

    def pause(self):
        self._pause.show()

    def show(self, time):
        self._show.update(time)
        self._show.show()

class Keybinds(object):
    def __init__(self, menu_event, preferences):
        self.menu_event = menu_event
        self.preferences = preferences
        self.instance = self

    def bind(self):
        keystr1 = self.preferences.get_start_stop_keybind()
        keybinder.bind(keystr1, self.menu_event, None, "play_pause")
        keystr2 = self.preferences.get_show_time_keybind()
        keybinder.bind(keystr2, self.menu_event, None, "show_time")

    def unbind(self):
        keystr1 = self.preferences.get_start_stop_keybind()
        keybinder.unbind(keystr1)
        keystr2 = self.preferences.get_show_time_keybind()
        keybinder.unbind(keystr2)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='pumubuntu')
    parser.add_argument('--nopadsp', action="store_true", dest='nopadsp', help='Don\'t try to fix Ubuntu sound using padsp')
    options = parser.parse_args()

    # Ubuntu fix for hearing sound...
    if(platform.system() == "Linux"):
        (distname, ver, id) = platform.linux_distribution()
        if(distname == "Ubuntu" and (not options.nopadsp)):
            # restart ourselves using padsp
            os.system("padsp "+resources_dir + "/" + script_name +" --nopadsp &")
            exit()

    if not(pynotify.init("Pumubuntu")):
        print("[!] Error: Could not load pynotify...")
        exit()

    
    gtk.gdk.threads_init()
    # Set an app indicator in system tray...
    ind = appindicator.Indicator("Pumubuntu", resources_dir + "/images/flag-blue.png", appindicator.CATEGORY_APPLICATION_STATUS) 
    ind.set_status (appindicator.STATUS_ACTIVE)
    ind.set_attention_icon(resources_dir + "/images/flag-blue.png")

    status = Status(ind) # we use this here and there

    def menu_event(menu_item, event):
        if(event == "play_pause"):
            if (timer.isRunning()):
                
                timer.stop()
            else:
                
                timer.start()
        elif(event == "exit"):
            gtk.main_quit()
        elif(event == "options"):
            OptionsWindow().show_all()
        elif(event == "show_time"):
            label = "%(minute)02d:%(second)02d" % \
                                        {"minute": timer.thread.minutes,"second": timer.thread.seconds}
            status.notifications.show(label)

    keybinds = Keybinds(menu_event, Preferences())
    keybinds.bind()

    # Indicator menu...
    menu = gtk.Menu()
    label_time = gtk.Label("00:00")
    menu_item = gtk.MenuItem()
    menu_item.add(label_time)
    menu_item.connect("activate", menu_event, "play_pause")
    menu_item.show()
    menu.append(menu_item)


    menu_item = gtk.ImageMenuItem(gtk.STOCK_PREFERENCES)
    menu_item.connect("activate", menu_event, "options")
    menu_item.show()
    menu.append(menu_item)
    menu_item = gtk.ImageMenuItem(gtk.STOCK_QUIT)
    menu_item.connect("activate", menu_event, "exit")
    menu_item.show()
    menu.append(menu_item)
    ind.set_menu(menu)

    timer = Timer(status, label_time)

    try:
        gtk.main()
    except KeyboardInterrupt:
        print("")
    exit()

